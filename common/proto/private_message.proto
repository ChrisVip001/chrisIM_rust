syntax = "proto3";

package private_message;

import "google/protobuf/timestamp.proto";

// 私聊消息服务
service PrivateMessageService {
  // 发送私聊消息
  rpc SendMessage (SendMessageRequest) returns (MessageResponse);
  
  // 获取消息历史
  rpc GetMessageHistory (GetMessageHistoryRequest) returns (GetMessageHistoryResponse);
  
  // 标记消息为已读
  rpc MarkAsRead (MarkAsReadRequest) returns (MarkAsReadResponse);
  
  // 删除消息（对自己）
  rpc DeleteMessage (DeleteMessageRequest) returns (DeleteMessageResponse);
  
  // 获取未读消息计数
  rpc GetUnreadCount (GetUnreadCountRequest) returns (GetUnreadCountResponse);
}

// 发送消息请求
message SendMessageRequest {
  string sender_id = 1;
  string receiver_id = 2;
  string content = 3;
  MessageContentType content_type = 4;
}

// 获取消息历史请求
message GetMessageHistoryRequest {
  string user_id = 1;
  string peer_id = 2;
  int32 limit = 3;
  int32 offset = 4;
}

// 获取消息历史响应
message GetMessageHistoryResponse {
  repeated Message messages = 1;
  int32 total = 2;
}

// 标记为已读请求
message MarkAsReadRequest {
  string user_id = 1;
  string peer_id = 2;
  optional string message_id = 3;  // 为空则标记全部
}

// 标记为已读响应
message MarkAsReadResponse {
  int32 affected_count = 1;
}

// 删除消息请求
message DeleteMessageRequest {
  string user_id = 1;
  string message_id = 2;
}

// 删除消息响应
message DeleteMessageResponse {
  bool success = 1;
}

// 获取未读消息计数请求
message GetUnreadCountRequest {
  string user_id = 1;
}

// 获取未读消息计数响应
message GetUnreadCountResponse {
  int32 total_count = 1;
  repeated PeerUnreadCount peer_counts = 2;
}

// 每个对话的未读计数
message PeerUnreadCount {
  string peer_id = 1;
  string peer_username = 2;
  int32 count = 3;
}

// 消息响应
message MessageResponse {
  Message message = 1;
}

// 消息
message Message {
  string id = 1;
  string sender_id = 2;
  string receiver_id = 3;
  string content = 4;
  MessageContentType content_type = 5;
  google.protobuf.Timestamp sent_at = 6;
  optional google.protobuf.Timestamp read_at = 7;
}

// 消息内容类型
enum MessageContentType {
  TEXT = 0;
  IMAGE = 1;
  AUDIO = 2;
  VIDEO = 3;
  FILE = 4;
} 
# API网关基础配置
# 路由配置
gateway:
  routes:
    routes:
      # 用户服务路由
      - id: "user-service"
        name: "用户服务"
        path_prefix: "/api/users"
        service_type: "User"
        require_auth: false
        methods: []
        rewrite_headers: {}

      # 好友服务路由
      - id: "friend-service"
        name: "好友服务"
        path_prefix: "/api/friends"
        service_type: "Friend"
        require_auth: true
        methods: []
        rewrite_headers: {}

      # 群组服务路由
      - id: "group-service"
        name: "群组服务"
        path_prefix: "/api/groups"
        service_type: "Group"
        require_auth: true
        methods: []
        rewrite_headers: {}

      # 聊天服务路由
      - id: "chat-service"
        name: "聊天服务"
        path_prefix: "/api/chat"
        service_type: "Chat"
        require_auth: true
        methods: []
        rewrite_headers: {}

  # 限流配置
  rate_limit:
    # 全局限流
    global:
      requests_per_second: 1000
      burst_size: 50
      enabled: true

    # 按路径限流
    path_rules:
      # 登录接口限流
      - path_prefix: "/api/user/login"
        rule:
          requests_per_second: 5
          burst_size: 3
          enabled: true

      # 注册接口限流
      - path_prefix: "/api/user/register"
        rule:
          requests_per_second: 2
          burst_size: 5
          enabled: true

      # 用户接口限流
      - path_prefix: "/api/users"
        rule:
          requests_per_second: 10
          burst_size: 20
          enabled: true

      # 聊天接口限流
      - path_prefix: "/api/chat"
        rule:
          requests_per_second: 20
          burst_size: 30
          enabled: true
    # IP限流
    ip_rules: {}

  # 认证配置
  auth:
    # JWT配置
    jwt:
      enabled: true
      secret: "change_this_to_a_secure_random_string"
      issuer: "api-gateway"
      expiry_seconds: 86400  # 24小时
      refresh_expiry_seconds: 604800  # 7天
      verify_issuer: false
      allowed_issuers: []
      header_name: "Authorization"
      header_prefix: "Bearer "
    # IP白名单
    ip_whitelist:
      - "127.0.0.1"
      - "::1"
    # 路径白名单
    path_whitelist:
      - "/api/health"
      - "/api/user/login"
      - "/metrics"

  # Metrics暴露端点 指标配置
  metrics_endpoint: "/metrics"

  # 重试配置
  retry:
    max_retries: 3
    retry_interval_ms: 200

  # 熔断配置
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    half_open_timeout_secs: 30

component: all # all, api, ws, rpc, db, pusher

# 日志配置
log:
  level: "info"      # 全局日志级别: trace, debug, info, warn, error
  output: "console"  # 日志输出位置: console, file
  format: "json"     # 日志格式: plain, json (使用json格式便于ELK收集)
  sqlx_level: "debug" # SQL查询日志级别
  # 各组件的日志级别配置
  components:
    tower: "warn"    # HTTP中间件
    hyper: "warn"    # HTTP库
    axum: "info"     # HTTP框架
    tonic: "info"    # gRPC框架
    rustIM: "debug"  # 本项目的日志
    redis: "warn"    # Redis操作

# 链路追踪配置
telemetry:
  enabled: true                             # 是否启用链路追踪
  endpoint: "http://localhost:4317"         # Jaeger OTLP端点
  sampling_ratio: 1.0                       # 采样率(0.0 - 1.0)
  propagation: "tracecontext"               # 传播器: tracecontext, b3, jaeger


# 数据库配置
database:
  postgres:
    host: 127.0.0.1
    port: 5432
    user: kelisi
    password: 123456
    database: rustim
  mongodb:
    host: 127.0.0.1
    port: 27017
    user:
    password:
    database: im
    clean:
      period: 3600 # days
      except_types:
        - "MsgTypeGroupInvitation"
        - "MsgTypeGroupInviteNew"
        - "MsgTypeGroupMemberExit"
        - "MsgTypeGroupRemoveMember"
        - "MsgTypeGroupDismiss"
        - "MsgTypeGroupUpdate"
        - "MsgTypeFriendApplyReq"
        - "MsgTypeFriendApplyResp"
        - "MsgTypeFriendBlack"
        - "MsgTypeFriendDelete"

  xdb: ./ip2region.xdb


# 服务配置
server:
  host: 127.0.0.1
  port: 8000
  ws_lb_strategy: RoundRobin # Random, RoundRobin


# consul服务注册与发现配置
service_center:
  host: 127.0.0.1   # "0.0.0.0" 在Docker中使用0.0.0.0绑定所有接口
  port: 8500
  timeout: 8080
  protocol: http
  service_refresh_interval: 30

# WebSocket配置
websocket:
  protocol: ws
  host: 127.0.0.1
  port: 8085
  name: websocket
  tags:
    - websocket
    - http
  health_check:
    health_type: "http"
    name: "websocket"
    url: "/health"
    interval: 15
    timeout: 60
    deregister_after: 60

# RPC服务配置
rpc:
  api:
    protocol: http
    host: 127.0.0.1
    port: 50000
    name: api
    tags:
      - api
      - grpc
    health_check:
      health_type: "ttl"
      name: "api"
      url: "/health"
      interval: 15
      timeout: 60
      deregister_after: 60
  ws:
    protocol: http
    host: 127.0.0.1
    port: 50001
    name: ws
    tags:
      - ws
      - grpc
    health_check:
      health_type: "ttl"
      name: "ws"
      url: "/health"
      interval: 15
      timeout: 60
      deregister_after: 60
  chat:
    protocol: http
    host: 127.0.0.1
    port: 50002
    name: chat
    tags:
      - chat
      - grpc
    health_check:
      health_type: "ttl"
      name: "chat"
      url: "/health"
      interval: 15
      timeout: 60
      deregister_after: 60
  pusher:
    protocol: http
    host: 127.0.0.1
    port: 50003
    name: pusher
    tags:
      - pusher
      - grpc
    health_check:
      health_type: "ttl"
      name: "pusher"
      url: "/health"
      interval: 15
      timeout: 60
      deregister_after: 60
  user:
    protocol: http
    host: 127.0.0.1
    port: 50004
    name: user
    tags:
      - user
      - grpc
    health_check:
      health_type: "ttl"
      name: "user"
      url: "/health"
      interval: 15
      timeout: 60
      deregister_after: 60
  friend:
    protocol: http
    host: 127.0.0.1
    port: 50005
    name: friend
    tags:
      - friend
      - grpc
    health_check:
      health_type: "ttl"
      name: "friend"
      url: "/health"
      interval: 15
      timeout: 60
      deregister_after: 60
  group:
    protocol: http
    host: 127.0.0.1
    port: 50006
    name: group
    tags:
      - group
      - grpc
    health_check:
      health_type: "ttl"
      name: "group"
      url: "/health"
      interval: 15
      timeout: 60
      deregister_after: 60

# Redis配置
redis:
  host: 127.0.0.1
  port: 6379
  seq_step: 10000
  max_connections: 100
  pool_timeout_ms:  5000
  connection_timeout_ms:  5000

# Kafka配置
kafka:
  hosts:
    - 127.0.0.1:9092
  topic: rustIM-chat
  group: chat
  connect_timeout: 5000 # milliseconds
  producer:
    timeout: 3000
    acks: all # 0: 不等待服务器响应，1: 等待服务器响应，all: 等待服务器响应并确认
    max_retry: 3
    retry_interval: 1000 # retry interval in milliseconds
  consumer:
    auto_offset_reset: earliest # earliest, latest
    session_timeout: 20000

# OSS配置
oss:
  endpoint: http://127.0.0.1:9000
  access_key: minioadmin
  secret_key: minioadmin
  bucket: rustIM
  avatar_bucket: rustIM-avatar
  region: us-east-1

# 腾讯云短信配置
sms:
  tencent:
    secret_id: AKIDBXjhiYBboqtmTzLYaVHuStDcvJdrv0uf    # 替换为您的腾讯云SecretId
    secret_key: fBYv79yaClDVaR7f3GLH3c2FH6h9QZXH       # 替换为您的腾讯云SecretKey
    app_id: 1400971247                                 # 替换为您的腾讯云短信应用ID
    sign_name: 蚂蚁密信App                              # 替换为您的短信签名名称
    template_id: 2381850                               # 替换为您的验证码短信模板ID
    expire_seconds: 300                                # 验证码有效期（秒）
    code_length: 6                                     # 验证码长度
    region: ap-guangzhou                               # 地域，如ap-guangzhou
    throttle_enabled: true                             # 是否启用防重复发送限制
    throttle_seconds: 300                              # 限制时间内不允许重复发送（秒）

